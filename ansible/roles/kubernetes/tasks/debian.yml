---
# Ensure the br_netfilter module is loaded and iptables can see bridged traffic
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
- name: 'ensure required modules are loaded'
  community.general.modprobe:
    name: '{{ item }}'
    state: 'present'
  loop:
    - 'br_netfilter'
  tags:
    - notest

- name: 'ensure required modules load at system startup'
  ansible.builtin.copy:
    dest: '/etc/modules-load.d/k8s.conf'
    content: |
      br_netfilter

# Set /proc/sys/net/bridge/bridge-nf-call-iptables to 1 by running
# sysctl net.bridge.bridge-nf-call-iptables=1 to pass bridged IPv4 traffic to iptablesâ€™ chains.
# This is a requirement for some CNI plugins to work, these persist across reboots.
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
- name: 'ensure sysctl options are configured for container runtime'
  ansible.posix.sysctl:
    name: '{{ item }}'
    value: '1'
    state: 'present'
    sysctl_file: '/etc/sysctl.d/k8s.conf'
    reload: false
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
  notify: restart systemd-sysctl

# Required for dual-stack
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/dual-stack-support/#before-you-begin
- name: Add duel-stack requirement line to k8s file
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: net.ipv6.conf.all.forwarding

- name: Update bridged IPv6 traffic forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present
    sysctl_file: /etc/sysctl.d/k8s.conf

- name: apt-get upgrade
  apt:
    upgrade: full
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: true
    autoremove: true
  register: apt_upgrade
  retries: 5
  until: apt_upgrade is success

- name: install kubernetes packages
  apt:
    name: '{{ kubernetes_packages }}'
    install_recommends: false
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true
    autoclean: true
    autoremove: true
  register: apt_install_common
  retries: 5
  until: apt_install_common is success
  ignore_errors: '{{ ansible_check_mode }}'

# Instructions: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
- name: add apt signing key for kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: adding apt repository for kubernetes
  apt_repository:
    repo: deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
    state: present
  register: kubernetes_repository
  retries: 10
  until: kubernetes_repository is success

# To downgrade these packages use the following apt options:
#   dpkg_options: force-downgrade
#   force: yes
- name: install kubernetes packages (3/4)
  apt:
    name:
      - kubelet={{ kubernetes_kubelet_version }}
      - kubeadm={{ kubernetes_kubeadm_version }}
      - kubectl={{ kubernetes_kubectl_version }}
    state: present
    force: true
    update_cache: true
  register: apt_install_kube
  retries: 5
  until: apt_install_kube is success

- name: add apt-mark hold to avoid version skew issues. (4/4)
  dpkg_selections:
    name: '{{ item }}'
    selection: hold
  loop:
    - 'kubectl'
    - 'kubelet'
    - 'kubeadm'

# TODO: Move to correct location; perhaps CNI?
# - name: add apt signing key for helm (1/3)
#   apt_key:
#     url: https://baltocdn.com/helm/signing.asc
#     state: present

# - name: adding apt repository for helm (2/3)
#   apt_repository:
#     repo: deb https://baltocdn.com/helm/stable/debian/ all main
#     state: present
#   register: helm_repository
#   retries: 10
#   until: helm_repository is success

# - name: install helm package (3/3)
#   apt:
#     name: helm
#     state: present
#     force: true
#     update_cache: true
#   register: apt_install_helm
#   retries: 5
#   until: apt_install_helm is success

# TODO: Move to correct location; Perhaps common for RPI?
# Adding required Kubernetes cgroups for Raspberry Pi
- name: Enable container features
  ansible.builtin.replace:
    path: '{{ common_rpi_cmd_file }}'
    regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
    replace: '\1 {{ item }}'
  with_items:
    - 'cgroup_enable=cpuset'
    - 'cgroup_memory=1'
    - 'cgroup_enable=memory'
  notify: reboot hosts
  when: ansible_architecture | regex_search('arm|aarch')
