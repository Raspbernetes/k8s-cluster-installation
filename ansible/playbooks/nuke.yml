---
- hosts:
    - masters
    - workers
  become: true
  gather_facts: true
  vars_prompt:
    name: "nuke_confirmation"
    prompt: "Are you sure you want to run this playbook? This will DESTROY your cluster. Answer with 'YES'"
    default: "NO"
    private: no
  any_errors_fatal: yes
  order: reverse_inventory
  tasks:
    - name: check confirmation
      fail: msg="playbook run confirmation failed"
      when: nuke_confirmation != "YES"

    - name: reset kubeadm
      command:
        cmd: kubeadm reset --force
        removes: /etc/kubernetes/kubelet.conf
      register: kubeadm_reset
      retries: 5
      until: kubeadm_reset is success

    - name: 'ensure calico link-netns devices have been removed'
      ansible.builtin.shell: |
        set -o pipefail && ip -all netns delete
      args:
        executable: '/bin/bash'
      when:
      - cni_plugin == 'calico'
      ignore_errors: true

    - name: 'uninstall | check if crictl is present'
      ansible.builtin.stat:
        path: '/usr/local/bin/crictl'
      register: crictl

    - name: 'uninstall | check if containerd is running'
      ansible.builtin.stat:
        path: '/run/containerd/containerd.sock'
      register: containerd_sock

    - name: 'uninstall | stop all cri containers'
      ansible.builtin.shell: |
        set -o pipefail && /usr/local/bin/crictl ps -q | xargs -r /usr/local/bin/crictl -t 60s stop
      args:
        executable: '/bin/bash'
      register: stop_all_containers
      retries: 5
      until: stop_all_containers.rc == 0
      delay: 5
      when:
      - crictl.stat.exists
      - containerd_sock.stat.exists
      - cri_plugin == 'containerd'
      ignore_errors: true

    - name: 'uninstall | remove all cri containers'
      ansible.builtin.command: |
        /usr/local/bin/crictl rm -a -f
      register: remove_all_containers
      retries: 5
      until: remove_all_containers.rc == 0
      delay: 5
      when:
      - crictl.stat.exists
      - containerd_sock.stat.exists
      - cri_plugin == 'containerd'

    - name: 'uninstall | stop all containerd pods'
      ansible.builtin.shell: |
        set -o pipefail && /usr/local/bin/crictl pods -q | xargs -r /usr/local/bin/crictl -t 60s stopp
      args:
        executable: '/bin/bash'
      register: stop_all_pods
      retries: 5
      until: stop_all_pods.rc == 0
      delay: 5
      when:
      - crictl.stat.exists
      - containerd_sock.stat.exists
      - cri_plugin == 'containerd'
      ignore_errors: true

    - name: 'uninstall | remove all containerd pods'
      ansible.builtin.command: |
        /usr/local/bin/crictl rmp -a -f
      register: remove_all_pods
      retries: 5
      until: remove_all_pods.rc == 0
      delay: 5
      when:
      - crictl.stat.exists
      - containerd_sock.stat.exists
      - cri_plugin == 'containerd'

    # Uninstall ContainerD from Ubuntu/Debian platforms
    - name: 'uninstall containerd on debian based platforms'
      block:
      - name: 'uninstall | stop containerd runtime'
        ansible.builtin.systemd:
          name: 'containerd'
          state: stopped
          enabled: false
        when: containerd_sock.stat.exists
      - name: 'uninstall | uninstall containerd package'
        ansible.builtin.package:
          name: containerd.io
          state: 'absent'
      - name: 'uninstall | remove containerd apt pin'
        ansible.builtin.file:
          path: '/etc/apt/preferences.d/containerd'
          state: 'absent'
      - name: 'uninstall | ensure containerd configuration directory has been removed'
        ansible.builtin.file:
          path: '/etc/containerd'
          state: 'absent'
      when:
      - ansible_os_family|lower == 'debian'
      - cri_plugin == 'containerd'

    # Archlinux uninstallation of containerd package
    - name: 'uninstall | remove containerd package'
      pacman:
        name: 'containerd'
        state: 'absent'
      when:
      - ansible_os_family|lower == 'archlinux'
      - cri_plugin == 'containerd'

    - name: reset iptables and ipvs
      command: # noqa 301
        cmd: "{{ item }}"
      loop:
        - iptables -P INPUT ACCEPT
        - iptables -P FORWARD ACCEPT
        - iptables -P OUTPUT ACCEPT
        - iptables -t nat -F
        - iptables -t mangle -F
        - iptables -F
        - iptables -X
        - ipvsadm --clear

    - name: remove cni net.d folder
      file:
        path: /etc/cni/net.d
        state: absent

    - name: remove apt-mark hold
      dpkg_selections:
        name: "{{ item }}"
        selection: purge
      loop:
        - 'kubectl'
        - 'kubelet'
        - 'kubeadm'
      when: ansible_os_family | lower == 'debian'

    # Issue caused when OpenEBS hasn't grafefully performed garbage collection when cluster is nuked.
    # This ensures the directory is not left in a corrupted state:
    # https://kubernetes.slack.com/archives/CUAKPFU78/p1597059291191700?thread_ts=1597053760.188200&cid=CUAKPFU78
    - name: remove openebs directory
      file:
        path: /var/openebs
        state: absent
